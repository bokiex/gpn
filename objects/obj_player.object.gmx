<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerright</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize attributes
hp = 100;
dir = "right";
state = "standing";
aim = point_direction(x, y, mouse_x, mouse_y);
grav = 0.3;
grav_wall = 0.2;

hsp = 0;
movespeed = 4; 
wallmovespeed = 5;

vsp = 0;
fallspeed = 10;
jumpspeed = -8;
walljumpspeed = -6.5;
wallfallspeed = 1;
fric = 0.5;

jumpbuffer = 0;
walljumpdelay = 0;
walljumpdelay_max = 17;

onground = false;
onwall = false;

grappled = false;
sprite_active = true


//Inventory
life = 3;
hpot_qty = 0;
goldkey = false;

// Knockback
bounce = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
            sprite_active = true
            ///Lighting
if (instance_exists(obj_lightingsystem) == 1){
    size = 400;
    draw_set_blend_mode(bm_subtract);
    surface_set_target(light);
    draw_ellipse_color(x - size / 2 - view_xview,y-size/2-view_yview,x+size/2-view_xview,y+size/2-view_yview,c_white,c_black,false);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs, Gravity, Jumping, Collisions
// Get input 
key_left = -keyboard_check(ord('A')); 
key_right = keyboard_check(ord('D')); 
key_jump = keyboard_check_pressed(vk_space);
key_jump_held = keyboard_check(vk_space);
key_potion = keyboard_check_pressed(ord('E'));
key_next = keyboard_check(ord('T'));
aim = point_direction(x, y, mouse_x, mouse_y);

//Enemy Collisions
if place_meeting(x, y, obj_enemy)
{
    var enemy
    enemy = instance_nearest(x, y, obj_enemy);
    direction = point_direction(x, y, enemy.x, enemy.y) + 185;
    bounce = 1
}
if (bounce == 1)
{
    alarm[1] = 5
    speed = 15
    bounce = 0
}
enemycollision = instance_place(floor(x), floor(y), obj_enemy);
spikecollision = instance_place(floor(x), floor(y), obj_spikes_parent);
ghostcollision = instance_place(floor(x), floor(y), obj_ghost);

if (key_next)
{
    grav = 0;
}
else
{
    grav = 0.3;
}
if (enemycollision)
{
    hp = hp - 1;
}

if (spikecollision)
{
    hp = hp - 100;
}

if (ghostcollision)
{
    hp = hp - 1;
}

// Calc current status
onground = place_meeting(x,y+1,obj_wall);
onwall = place_meeting(x+1,y,obj_wall) - place_meeting(x-1,y,obj_wall);
if (onground) jumpbuffer = 6;

//React to inputs
walljumpdelay = max(walljumpdelay-1,0);
if (walljumpdelay == 0)
{
    move = key_left + key_right;
    
    // Acceleration 
    if (move == 1) {
        dir = "right";
        if (hsp &lt; movespeed){
            hsp += fric;
        }
        else{
            hsp = movespeed;
        }
    }
    if (move == -1)
    {
        dir = "left";
        if (hsp &gt; -movespeed){
            hsp -= fric;
        }
        else{
            hsp = -movespeed;
        }
    }
    
    // Decceleration
    if (move == 0){
        if (hsp != 0){
            if (hsp &lt; 0){
                hsp += fric;
            }
            if (hsp &gt; 0){
                hsp -= fric;
            }
        }    
    }
}

//Health Potion
if (key_potion == 1) {
    if (hpot_qty &gt; 0) {
        hp += 50
        if (hp &gt; 100)
            hp = 100
        hpot_qty -= 1
    }
}

//Lives
if (hp &lt; 0) {
    life -= 1
    hp = 100
    sprite_active = false
    sprite_index = spr_player_lifelost
    alarm[0] = room_speed * 1
    scr_death()
}

// Wall jump
if (onwall != 0) &amp;&amp; (!onground) &amp;&amp; (key_jump) // check whether player is off wall and ground with key jump pressed
{
    walljumpdelay = walljumpdelay_max; // disable user input for movement for awhile
    hsp = -onwall * wallmovespeed;
    vsp = walljumpspeed;    
}

var grav_final = grav;
var vsp_max_final = fallspeed;
if (onwall != 0) &amp;&amp; (vsp &gt; 0)
{
    grav_final = grav_wall
    vsp_max_final = wallfallspeed;
}
vsp += grav_final; 
vsp = clamp(vsp,-vsp_max_final,vsp_max_final) // limit vsp 

// After grapple
if (grappled)
{
    if (speed &gt; 0)
    {
        speed -= 0.2;
    }
    else
    {
        speed = 0;
        if (vsp &lt; fallspeed)
        {
            if (!onground &amp; !onwall)
            {
                vsp += grav; 
            }
        }
        else
        {
            vsp = fallspeed;
        }
        if(onground || onwall)
        {
            vsp = 0;
            grappled = false;
        } 
    }
}

// Ground Jump
if (jumpbuffer &gt; 0)
{
    jumpbuffer--;
    if (key_jump)
    {
        //jumping = true;
        jumpbuffer = 0;
        vsp = jumpspeed
    }      
}

// Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    
}

// Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;  
}

//Door Horizontal Collision
if (instance_exists(obj_golddoor))
{
    if (obj_golddoor.opened != true) {
        if (place_meeting(x+hsp,y,obj_golddoor)) {
            //Check for key
            if (obj_player.goldkey == true) {
                obj_golddoor.opened = true
            }
    
            while(!place_meeting(x+sign(hsp),y,obj_golddoor)) {
                x += sign(hsp);
            }
            hsp = 0;
        }
    }    
}

//Thrower Collision
if (instance_exists(obj_thrower)) {
    if (place_meeting(x+hsp,y,obj_thrower)) {
        hsp = 0;
    }
    if (place_meeting(x,y+vsp,obj_thrower)) {
        vsp = 0;  
    }
}

x += hsp;
y += vsp;

//Animations
if (sprite_active) {
    if (key_jump){
        sprite_index = spr_playerjump;
        image_speed = 0.1;
    }

    else if (dir = "right" &amp;&amp; move = 1) {
        sprite_index = spr_playerwalkright;
        image_speed = 0.6;
    }
    else if (dir = "left" &amp;&amp; move = -1) {
        sprite_index = spr_playerwalkleft;
        image_speed = 0.6;
    }

    else if (dir = "right" &amp;&amp; move = 0) {
        sprite_index = spr_playerright;
    }

    else if (dir = "left" &amp;&amp; move = 0) {
        sprite_index = spr_playerleft;
    }
}

if (life &lt;= 0)
{
    audio_stop_sound(snd_explore);
    score -= 500;
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(place_meeting(x, y, other)) {
    x += lengthdir_x(1, point_direction(other.x, other.y, x, y));
    y += lengthdir_y(1, point_direction(other.x, other.y, x, y));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grappled = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Grapple
if !instance_exists(obj_grapple) {
    grappled = false;
    grap = instance_create(x, y, obj_grapple)
    grap.speed = 15;
    grap.direction = aim;
    grap.image_angle = aim;
    speed =0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (life &gt; 1) {
    life -= 1
    hp = 100
    sprite_active = false
    sprite_index = spr_player_lifelost
    alarm[0] = room_speed * 1
    scr_death()
}
else
{
    game_restart()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_hpotion, 0, 13, 120)

var i = hpot_qty
draw_text(23, 120, "x " + string(i))

var l = 0

repeat(life) {
    draw_sprite(spr_lifepot, 0, 13+l, 98)
    l += 20
}

if (goldkey) {
    draw_sprite(spr_goldkey, 0, 65, 120)    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_healthbar(x-15, y-37, x+15, y-32, hp, c_black, c_red, c_green, 0, true, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
